{"_type":"export","__export_format":4,"__export_date":"2021-08-28T21:36:47.139Z","__export_source":"insomnia.desktop.app:v2021.3.0","resources":[{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd07548a50da5","parentId":"fld_ede0d7d80fb84707ae149c5e35de2499","modified":1630185742232,"created":1627969673929,"url":"{{ base_url }}/v1/categories","name":"Get a user's categories","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969710044.875,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_ede0d7d80fb84707ae149c5e35de2499","parentId":"wrk_6583ff7f07274719a8af30a13fefd075","modified":1627969713778,"created":1627969702380,"name":"Categories","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1627969709998,"_type":"request_group"},{"_id":"wrk_6583ff7f07274719a8af30a13fefd075","parentId":null,"modified":1627969676236,"created":1627969676236,"name":"Better Todos API 0.1.0","description":"The API for a better todo list","scope":"collection","_type":"workspace"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd0751a1d3cfb","parentId":"fld_ede0d7d80fb84707ae149c5e35de2499","modified":1630177729083,"created":1627969673929,"url":"{{ base_url }}/v1/categories","name":"Create a new category","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"name\": \"string\",\n  \"description\": \"string\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_e8e72a2e90d04098b23d2a7fec9faca4"}],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969709994.875,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd0750fe58f87","parentId":"fld_ede0d7d80fb84707ae149c5e35de2499","modified":1630185530009,"created":1627969673928,"url":"{{ base_url }}/v1/categories/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd07548a50da5', 'b64::JFswXS5pZA==::46b', 'never', 60 %}","name":"Update a category","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"name\": \"string\",\n\t\"description\": null\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_87a852151297454fab34a30684685068"}],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969709944.875,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd075ccc08bf5","parentId":"fld_ede0d7d80fb84707ae149c5e35de2499","modified":1630178432641,"created":1627969673927,"url":"{{ base_url }}/v1/categories/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd07548a50da5', 'b64::JFswXS5pZA==::46b', 'never', 60 %}","name":"Remove a category","description":"","method":"DELETE","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969709894.875,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd075a4ec5395","parentId":"fld_ede0d7d80fb84707ae149c5e35de2499","modified":1630178435998,"created":1627969673927,"url":"{{ base_url }}/v1/categories/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd07548a50da5', 'b64::JFswXS5pZA==::46b', 'never', 60 %}/todos","name":"Get all the todos in a category","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969709844.875,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd0754f9b1896","parentId":"fld_e08f3b07748f40b29426997ebbed5bad","modified":1630178748711,"created":1627969673926,"url":"{{ base_url }}/v1/tags","name":"Get a user's tags","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969710029.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_e08f3b07748f40b29426997ebbed5bad","parentId":"wrk_6583ff7f07274719a8af30a13fefd075","modified":1627969715185,"created":1627969706889,"name":"Tags","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1627969709985.5,"_type":"request_group"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd0759e138c59","parentId":"fld_e08f3b07748f40b29426997ebbed5bad","modified":1630185429967,"created":1627969673926,"url":"{{ base_url }}/v1/tags","name":"Create a new tag","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"name\": \"Class 5\",\n  \"color\": null\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_b5353fa6d8c64ac182bb65abe57cf214"}],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969709979.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd07550f403aa","parentId":"fld_e08f3b07748f40b29426997ebbed5bad","modified":1630178868388,"created":1627969673925,"url":"{{ base_url }}/v1/tags/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd0754f9b1896', 'b64::JFswXS5pZA==::46b', 'never', 60 %}","name":"Update a tag","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"name\": \"Project 1\",\n  \"color\": \"fbad24\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_0e89111354be4bdcb53461e5e55689cb"}],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969709879.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd075573c218e","parentId":"fld_e08f3b07748f40b29426997ebbed5bad","modified":1630178879479,"created":1627969673924,"url":"{{ base_url }}/v1/tags/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd0754f9b1896', 'b64::JFswXS5pZA==::46b', 'never', 60 %}","name":"Remove a tag","description":"","method":"DELETE","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969709854.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd075d59a090f","parentId":"fld_e08f3b07748f40b29426997ebbed5bad","modified":1630178884745,"created":1627969673924,"url":"{{ base_url }}/v1/tags/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd0754f9b1896', 'b64::JFswXS5pZA==::46b', 'never', 60 %}/todos","name":"Get all the todos with the tag","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969709829.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd075cabf3666","parentId":"fld_a468239b8972462d848bce9160a915d9","modified":1630179440672,"created":1627969673922,"url":"{{ base_url }}/v1/todos","name":"List a user's todos","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969691947.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_a468239b8972462d848bce9160a915d9","parentId":"wrk_6583ff7f07274719a8af30a13fefd075","modified":1627969709973,"created":1627969709973,"name":"Todos","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1627969709973,"_type":"request_group"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd075151cddb4","parentId":"fld_a468239b8972462d848bce9160a915d9","modified":1630182381133,"created":1627969673922,"url":"{{ base_url }}/v1/todos","name":"Create a new todo","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"title\": \"testing\",\n  \"content\": \"string\",\n  \"due\": \"2021-08-03T05:47:53.918Z\",\n  \"category\": 1,\n  \"tags\": [2, 3]\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_e3acf56ef2be4573806626fca46ebb9e"}],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969691897.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd0753ee0f971","parentId":"fld_a468239b8972462d848bce9160a915d9","modified":1630181339733,"created":1627969673921,"url":"{{ base_url }}/v1/todos/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd075cabf3666', 'b64::JFswXS5pZA==::46b', 'never', 60 %}","name":"Get an individual todo","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969691847.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd0759b037f99","parentId":"fld_a468239b8972462d848bce9160a915d9","modified":1630184796667,"created":1627969673920,"url":"{{ base_url }}/v1/todos/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd075cabf3666', 'b64::JFswXS5pZA==::46b', 'never', 60 %}","name":"Update a todo","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"title\": \"string\",\n  \"content\": \"string\",\n  \"due\": \"2021-08-03T05:47:53.918Z\",\n  \"category\": null,\n  \"tags\": [\n    \n  ]\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_7813bdc58d744cd190bf1b200e70e115"}],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969691797.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_wrk_6583ff7f07274719a8af30a13fefd07596ffa35e","parentId":"fld_a468239b8972462d848bce9160a915d9","modified":1630184805395,"created":1627969673919,"url":"{{ base_url }}/v1/todos/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd075cabf3666', 'b64::JFswXS5pZA==::46b', 'never', 60 %}","name":"Remove a todo","description":"","method":"DELETE","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969691747.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_8b7a29cfee67493fb7a131d432fe3264","parentId":"fld_a468239b8972462d848bce9160a915d9","modified":1630184857356,"created":1628551304419,"url":"{{ base_url }}/v1/todos/{% response 'body', 'req_wrk_6583ff7f07274719a8af30a13fefd075cabf3666', 'b64::JFswXS5pZA==::46b', 'never', 60 %}/toggle","name":"Toggle a todo","description":"","method":"POST","body":{},"parameters":[],"headers":[],"authentication":{"type":"basic","useISO88591":false,"disabled":false,"username":"{{ _.authentication.username }}","password":"{{ _.authentication.password }}"},"metaSortKey":-1627969691697.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_8df1dd704d34bcde77b1a0f88a5a85def65bb9db","parentId":"wrk_6583ff7f07274719a8af30a13fefd075","modified":1630186584962,"created":1627969673933,"name":"Base environment","data":{"base_url":"{{ scheme }}://{{ host }}{{ base_path }}","scheme":"","base_path":"","host":"","authentication":{"username":"","password":""}},"dataPropertyOrder":{"&":["base_url","scheme","base_path","host","authentication"],"&~|authentication":["username","password"]},"color":null,"isPrivate":false,"metaSortKey":1627969673933,"_type":"environment"},{"_id":"jar_8df1dd704d34bcde77b1a0f88a5a85def65bb9db","parentId":"wrk_6583ff7f07274719a8af30a13fefd075","modified":1630178323688,"created":1627969679862,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_2c30459d72fd4a2cac8c2ac279fbf381","parentId":"wrk_6583ff7f07274719a8af30a13fefd075","modified":1627969676253,"created":1627969676237,"fileName":"Better Todos API 0.1.0","contents":"openapi: 3.0.3\ninfo:\n  title: Better Todos API\n  description: The API for a better todo list\n  version: 0.1.0\n\nservers:\n  - url: http://localhost:5000\n    description: The default address for the API\n\nsecurity:\n  - cookieAuth: []\n\npaths:\n  /authentication/register:\n    post:\n      summary: Create a new account\n      description: |\n        Create a new user account with the desired username and password for\n        authentication. Also associate a name with their login information.\n      tags:\n        - Authentication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  minLength: 2\n                  maxLength: 256\n                  required: true\n                username:\n                  type: string\n                  minLength: 2\n                  maxLength: 64\n                  required: true\n                password:\n                  type: string\n                  minLength: 8\n                  required: true\n            example:\n              name: Alex Krantz\n              username: akrantz01\n              password: testing-password\n      responses:\n        '201':\n          description: Successfully registered the user\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '409':\n          description: The username is already in use\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n              example:\n                code: 409\n                message: that username is already in use\n\n  /authentication/login:\n    post:\n      summary: Login a user\n      description: |\n        Login a user by their username and password. Generates an authentication token\n        for the user if their credentials are valid.\n      tags:\n        - Authentication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  required: true\n                password:\n                  type: string\n                  required: true\n            example:\n              username: akrantz01\n              password: testing-password\n      responses:\n        '201':\n          description: Successfully logged in and a token was generated\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: session=abcdefg12345; Path=/; HttpOnly\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n\n  /authentication/self:\n    get:\n      summary: Get the current user's details\n      description: Get all the public details about a user including their username and display name.\n      tags:\n        - Authentication\n      responses:\n        '200':\n          description: Successfully retrieved the user's information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  username:\n                    type: string\n                  name:\n                    type: string\n              example:\n                username: akrantz01\n                name: Alex Krantz\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n    put:\n      summary: Update the current user's details\n      description: |\n        Update a user's username, display name, and/or password. Any field not present in\n        the request will not be modified.\n      tags:\n        - Authentication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  minLength: 2\n                  maxLength: 256\n                  required: false\n                username:\n                  type: string\n                  minLength: 2\n                  maxLength: 64\n                  required: false\n                password:\n                  type: string\n                  minLength: 8\n                  required: false\n            example:\n              name: Testing User\n              username: testing\n              password: testing-password\n      responses:\n        '204':\n          description: Successfully updated the user\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n\n  /authentication/logout:\n    get:\n      summary: Logout the current user\n      description: Logout the current user by revoking their authentication token.\n      tags:\n        - Authentication\n      responses:\n        '204':\n          description: Successfully logged out the user\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n\n  /categories:\n    get:\n      summary: Get a user's categories\n      description: Get a list of all the categories created by the current user.\n      tags:\n        - Categories\n      responses:\n        '200':\n          description: Successfully got the user's categories\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Category\"\n              example:\n                - id: 1\n                  name: School\n                  description: Homework, events, and such\n                - id: 2\n                  name: Projects\n                  description: Dates and deadlines for school projects\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n    post:\n      summary: Create a new category\n      description: |\n        Create a new category for todos with a name and an optional description. For the\n        description, null, absent, empty are treated as equivalent.\n      tags:\n        - Categories\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  minLength: 1\n                  maxLength: 64\n                  required: true\n                  description: The name of the category\n                description:\n                  type: string\n                  required: false\n                  nullable: true\n                  description: Extra information about the category\n            example:\n              name: School\n              description: Homework, events, and such\n      responses:\n        '201':\n          description: Successfully created the category\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    description: The ID of the newly created category\n              example:\n                id: 2\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n\n  /categories/{id}:\n    put:\n      summary: Update a category\n      description: |\n        Change the name and/or description of a category by its ID. Similarly to creating\n        a category, null and empty are equivalent. However, if the description is not\n        included, it will not be updated.\n      tags:\n        - Categories\n      parameters:\n        - $ref: \"#/components/parameters/Category\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  type: string\n                  minLength: 1\n                  maxLength: 64\n                  required: false\n                  nullable: true\n                  description: The name of the category\n                description:\n                  type: string\n                  required: false\n                  nullable: true\n                  description: Extra information about the category\n            example:\n              name: Projects\n              description: Dates and deadlines for school projects\n      responses:\n        '204':\n          description: Successfully updated the category\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n    delete:\n      summary: Remove a category\n      description: Delete a category and remove it from any todos that were associated with it.\n      tags:\n        - Categories\n      parameters:\n        - $ref: \"#/components/parameters/Category\"\n      responses:\n        '204':\n          description: Successfully deleted the category\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n\n  /categories/{id}/todos:\n    get:\n      summary: Get all the todos in a category\n      description: Retrieves all the todos a user has associated with the given category.\n      tags:\n        - Categories\n      parameters:\n        - $ref: \"#/components/parameters/Category\"\n      responses:\n        '200':\n          description: Successfully got all the todos\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PartialTodo\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n\n  /tags:\n    get:\n      summary: Get a user's tags\n      description: Get a list of all the tags a user has created for todos.\n      tags:\n        - Tags\n      responses:\n        '200':\n          description: Successfully got the user's tags\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Tag\"\n              example:\n                - id: 9\n                  name: Project 1\n                  color: fbad24\n                - id: 3\n                  name: Class 1\n                  color: e3913f\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n    post:\n      summary: Create a new tag\n      description: |\n        Create a new tag for a todo with a name and color. If a color is not provided,\n        one will be automatically generated.\n      tags:\n        - Tags\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  minLength: 1\n                  maxLength: 64\n                  required: true\n                  description: The name of the tag\n                color:\n                  type: string\n                  pattern: '^[0-9a-f]{6}$'\n                  required: false\n                  nullable: true\n                  description: The hex color of the tag without the `#`\n              example:\n                name: Class 1\n                color: e3913f\n      responses:\n        '201':\n          description: Successfully created the tag\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    description: The ID of the newly created tag\n              example:\n                id: 2\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n\n  /tags/{id}:\n    put:\n      summary: Update a tag\n      description: |\n        Change the name and/or color of the tag. If either value is not provided, it will not be modified.\n      tags:\n        - Tags\n      parameters:\n        - $ref: \"#/components/parameters/Tag\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  minLength: 1\n                  maxLength: 64\n                  required: false\n                  nullable: true\n                  description: The name of the tag\n                color:\n                  type: string\n                  pattern: '^[0-9a-f]{6}$'\n                  required: false\n                  nullable: true\n                  description: The hex color of the tag without the `#`\n              example:\n                name: Project 1\n                color: fbad24\n      responses:\n        '204':\n          description: Successfully updated the tag\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n    delete:\n      summary: Remove a tag\n      description: Delete a tag and remove it from any todos that were associated with it.\n      tags:\n        - Tags\n      parameters:\n        - $ref: \"#/components/parameters/Tag\"\n      responses:\n        '204':\n          description: Successfully delete the tag\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n\n  /tags/{id}/todos:\n    get:\n      summary: Get all the todos with the tag\n      description: Retrieves all the todos a user has associated with the given tag.\n      tags:\n        - Tags\n      parameters:\n        - $ref: \"#/components/parameters/Tag\"\n      responses:\n        '200':\n          description: Successfully got all the todos\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PartialTodo\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n\n  /todos:\n    get:\n      summary: List a user's todos\n      description: |\n        Get a list of all the todos for the current user. This returns partial todos\n        to reduce the amount of bandwidth required.\n      tags:\n        - Todos\n      responses:\n        '200':\n          description: Successfully got the user's todos\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PartialTodo\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n    post:\n      summary: Create a new todo\n      description: |\n        Create a new todo for a user with some title. Optionally, it can also have a longer\n        description, a category, some tags, and a due date.\n      tags:\n        - Todos\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  minLength: 1\n                  maxLength: 128\n                  required: true\n                  description: A short title for the todo\n                content:\n                  type: string\n                  required: false\n                  nullable: true\n                  description: Extra information about the todo\n                due:\n                  type: string\n                  format: date-time\n                  required: false\n                  nullable: true\n                  description: The date and time when the todo is due\n                category:\n                  type: integer\n                  required: false\n                  nullable: true\n                  description: The ID of the category to associate with\n                tags:\n                  type: array\n                  description: Tags to add to the todo\n                  required: false\n                  nullable: true\n                  items:\n                    type: integer\n                    description: The ID of the tag to associate with\n            example:\n              title: Assignment 3\n              content: Some assignment for school\n              category: 4\n              tags: [9, 3]\n              due: 2021-08-25T23:59:59Z\n      responses:\n        '201':\n          description: Successfully created the todo\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                    description: The ID of the newly created todo\n              example:\n                id: 3\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n\n  /todos/{id}:\n    get:\n      summary: Get an individual todo\n      description: Retrieves detailed information about a todo\n      tags:\n        - Todos\n      parameters:\n        - $ref: \"#/components/parameters/Todo\"\n      responses:\n        '200':\n          description: Successfully got the todo\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Todo\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n    put:\n      summary: Update a todo\n      description: |\n        Change descriptive information about a todo by its ID. Any field not present\n        in the request will not be updated. Any nullable field set to null will have\n        the current value removed.\n      tags:\n        - Todos\n      parameters:\n        - $ref: \"#/components/parameters/Todo\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n                  minLength: 1\n                  maxLength: 128\n                  required: false\n                  description: A short title for the todo\n                content:\n                  type: string\n                  required: false\n                  nullable: true\n                  description: Extra information about the todo\n                due:\n                  type: string\n                  format: date-time\n                  required: false\n                  nullable: true\n                  description: The date and time when the todo is due\n                category:\n                  type: integer\n                  required: false\n                  nullable: true\n                  description: The ID of the category to associate with\n                tags:\n                  type: array\n                  description: Tags to add to the todo\n                  required: false\n                  nullable: true\n                  items:\n                    type: integer\n                    description: The ID of the tag to associate with\n            example:\n              title: Assignment 3\n              content: null\n              category: 4\n              tags: null\n              due: 2021-08-25T23:59:59Z\n      responses:\n        '204':\n          description: Successfully updated the todo\n        '400':\n          $ref: \"#/components/responses/BadRequest\"\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n    delete:\n      summary: Remove a todo\n      description: Deletes a todo from the database\n      tags:\n        - Todos\n      parameters:\n        - $ref: \"#/components/parameters/Todo\"\n      responses:\n        '204':\n          description: Successfully delete the todo\n        '401':\n          $ref: \"#/components/responses/Unauthorized\"\n        '403':\n          $ref: \"#/components/responses/Forbidden\"\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n\ncomponents:\n  parameters:\n    Category:\n      in: path\n      name: id\n      schema:\n        type: integer\n      required: true\n      description: The category's ID\n      example: 4\n    Tag:\n      in: path\n      name: id\n      schema:\n        type: integer\n      required: true\n      description: The tag's ID\n      example: 2\n    Todo:\n      in: path\n      name: id\n      schema:\n        type: integer\n      required: true\n      description: The todo's ID\n      example: 1\n  responses:\n    BadRequest:\n      description: The request could not be processed\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            code: 400\n            message: missing required fields\n    Forbidden:\n      description: The user's permissions are insufficient\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            code: 403\n            message: forbidden\n    NotFound:\n      description: The requested resource could not be found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            code: 404\n            message: not found\n    Unauthorized:\n      description: The provided credentials were incorrect\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n          example:\n            code: 401\n            message: unauthorized\n  schemas:\n    Category:\n      type: object\n      description: A category containing todos\n      properties:\n        id:\n          type: integer\n          description: The category's ID\n        name:\n          type: string\n          description: A short name for the category\n        description:\n          type: string\n          description: Extra information about the category\n    Error:\n      type: object\n      description: A generic error message\n      properties:\n        code:\n          type: integer\n          description: The HTTP status code\n        message:\n          type: string\n          description: A simplified message for why the error occurred\n    PartialTodo:\n      type: object\n      description: A stripped down version of a todo\n      properties:\n        id:\n          type: integer\n          description: The todo's ID\n        title:\n          type: string\n          description: A short title for the todo\n        complete:\n          type: boolean\n          description: Whether the todo was completed\n        category:\n          $ref: \"#/components/schemas/Category\"\n        tags:\n          type: array\n          description: The associated tags\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        due:\n          type: string\n          description: When the item is due by\n      example:\n        id: 2\n        title: Assignment 3\n        complete: true\n        category:\n          id: 4\n          name: Projects\n          description: Dates and deadlines for school projects\n        tags:\n          - id: 9\n            name: Project 1\n            color: fbad24\n        due: 2021-08-25T23:59:59Z\n    Tag:\n      type: object\n      description: A tag for a todo\n      properties:\n        id:\n          type: integer\n          description: The tag's ID\n        name:\n          type: string\n          description: The name of the tag\n        color:\n          type: string\n          description: The hex color code for the tag\n    Todo:\n      type: object\n      description: The full information about a todo\n      properties:\n        id:\n          type: integer\n          description: The todo's ID\n        title:\n          type: string\n          description: A short title for the todo\n        content:\n          type: string\n          description: Extra information about the todo\n        complete:\n          type: boolean\n          description: Whether the todo was completed\n        category:\n          $ref: \"#/components/schemas/Category\"\n        tags:\n          type: array\n          description: The associated tags\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        due:\n          type: string\n          description: When the item is due by\n          format: date-time\n        created_at:\n          type: string\n          description: When the todo was first created\n          format: date-time\n        last_updated:\n          type: string\n          description: When the todo was last updated\n          format: date-time\n      example:\n        id: 1\n        title: Quiz 1\n        description: A quiz on some school stuff\n        complete: false\n        category:\n          id: 8\n          name: School\n          description: Homework, events, and such\n        tags:\n          - id: 3\n            name: Class 1\n            color: e3913f\n        due: 2021-08-27T23:59:59Z\n        created_at: 2021-08-20T08:24:52Z\n        last_updated: 2021-08-22T13:36:39Z\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: session\n      description: An authentication token generated by `/auth/login`.\n","contentType":"yaml","_type":"api_spec"},{"_id":"env_env_8df1dd704d34bcde77b1a0f88a5a85def65bb9db_sub","parentId":"env_8df1dd704d34bcde77b1a0f88a5a85def65bb9db","modified":1630186566501,"created":1627969673933,"name":"Development","data":{"scheme":"http","base_path":"","host":"localhost:5000","authentication":{"username":"alex","password":"amazing-password"}},"dataPropertyOrder":{"&":["scheme","base_path","host","authentication"],"&~|authentication":["username","password"]},"color":null,"isPrivate":false,"metaSortKey":1627969673933,"_type":"environment"}]}